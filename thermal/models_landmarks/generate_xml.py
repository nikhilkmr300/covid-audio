# This file generates the XML files to be fed to train_shape_predictor in dlib.

# <box> is for the bounding box generated by the face detector, and contains the
# location and dimensions of the bounding box around the face. The face detector
# model can be found in ../models_face.

# Note that face detection (i.e., bounding box generation) is required before
# training the shape predictor (i.e., the landmark detector). The database does
# not contain the location and dimensions of the bounding boxes, hence we
# train our own face detector, which can be found in the models_face directory.

# <part> is for the annotations of the landmarks. These have been taken from the
# annotations provided in the database (FaceDB_Snapshot_complete) as ljson
# files.

import json
import shutil
import os
import sys

# ID numbers of the annotations to consider. Allowed values in range [0, 67].
parts = range(68)

train_dir = os.path.join('..', 'data', 'train')
valid_dir = os.path.join('..', 'data', 'valid')
test_dir = os.path.join('..', 'data', 'test')
annot_dir = 'annot'

# Images are of dimension 1024x768
img_width = 1024
img_height = 768

# Deleting dlib-annot directory recursively if it exists.
if os.path.exists(annot_dir):
    shutil.rmtree(annot_dir)
# Creating new dlib-annot directory containing XML annotations in dlib format.
os.makedirs(annot_dir)

train_xml_path = os.path.join(annot_dir, 'train_annot.xml')
valid_xml_path = os.path.join(annot_dir, 'valid_annot.xml')
test_xml_path = os.path.join(annot_dir, 'test_annot.xml')

# Deleting XML files if they already exist.
if os.path.exists(os.path.join(annot_dir, 'train_annot.xml')):
    os.remove(train_xml_path)
if os.path.exists(os.path.join(annot_dir, 'valid_annot.xml')):
    os.remove(valid_xml_path)
if os.path.exists(os.path.join(annot_dir, 'test_annot.xml')):
    os.remove(test_annot_path)
# Creating new XML files.
train_xml = open(train_xml_path, 'a')
valid_xml = open(valid_xml_path, 'a')
test_xml = open(test_xml_path, 'a')

# Writing header information to XML files.
train_xml.write('<?xml version=\'1.0\' encoding=\'ISO-8859-1\'?>\n\
<?xml-stylesheet type=\'text/xsl\' href=\'image_metadata_stylesheet.xsl\'?>\n\
<dataset>\n\
<name>Training images</name>\n\
<images>\n')
valid_xml.write('<?xml version=\'1.0\' encoding=\'ISO-8859-1\'?>\n\
<?xml-stylesheet type=\'text/xsl\' href=\'image_metadata_stylesheet.xsl\'?>\n\
<dataset>\n\
<name>Validation images</name>\n\
<images>\n')
test_xml.write('<?xml version=\'1.0\' encoding=\'ISO-8859-1\'?>\n\
<?xml-stylesheet type=\'text/xsl\' href=\'image_metadata_stylesheet.xsl\'?>\n\
<dataset>\n\
<name>Test images</name>\n\
<images>\n')

# Training XML
for file in sorted(os.listdir(train_dir)):
    # Image file
    extension = file[-4:]
    if extension == '.png':
        img_id = file[:-4]
        # File path to image must be relative path from where train_annot.xml is
        # located.
        path_to_img = os.path.join('..', train_dir, img_id + extension)
        train_xml.write(f'\t<image file=\'{path_to_img}\'>\n')
        # Defining bounding box coordinates
        train_xml.write(f'\t\t<box top=\'0\' left=\'0\' width=\'{img_width}\' height=\'{img_height}\'>\n')
        # Finding x and y coordinates of marker to pass to <part> tag
        with open(os.path.join(train_dir, img_id + '.ljson'), 'r') as f:
            markers = json.load(f)['landmarks']['points']
        for i, (x, y) in enumerate(markers):
            x, y = int(x), int(y)
            train_xml.write(f'\t\t\t<part name=\'{i}\' x=\'{x}\' y=\'{y}\'/>\n')
        # Adding closing tag
        train_xml.write(f'\t\t</box>\n')
        train_xml.write(f'\t</image>\n')

# Adding closing tags
train_xml.write('</images>\n')
train_xml.write('</dataset>\n')

train_xml.close()

# Validation XML
for file in sorted(os.listdir(valid_dir)):
    # Image file
    extension = file[-4:]
    if extension == '.png':
        img_id = file[:-4]
        # File path to image must be relative path from where valid_annot.xml is
        # located.
        path_to_img = os.path.join('..', valid_dir, img_id + extension)
        valid_xml.write(f'\t<image file=\'{path_to_img}\'>\n')
        # Defining bounding box coordinates.
        valid_xml.write(f'\t\t<box top=\'0\' left=\'0\' width=\'{img_width}\' height=\'{img_height}\'>\n')
        # Finding x and y coordinates of marker to pass to <part> tag.
        with open(os.path.join(valid_dir, img_id + '.ljson'), 'r') as f:
            markers = json.load(f)['landmarks']['points']
        for i, (x, y) in enumerate(markers):
            x, y = int(x), int(y)
            valid_xml.write(f'\t\t\t<part name=\'{i}\' x=\'{x}\' y=\'{y}\'/>\n')
        # Adding closing tag
        valid_xml.write(f'\t\t</box>\n')
        valid_xml.write(f'\t</image>\n')

# Adding closing tags
valid_xml.write('</images>\n')
valid_xml.write('</dataset>\n')

valid_xml.close()

# Test XML
for file in sorted(os.listdir(test_dir)):
    # Image file
    extension = file[-4:]
    if extension == '.png':
        img_id = file[:-4]
        # File path to image must be relative path from where test_annot.xml is
        # located.
        path_to_img = os.path.join('..', test_dir, img_id + extension)
        test_xml.write(f'\t<image file=\'{path_to_img}\'>\n')
        # Defining bounding box coordinates
        test_xml.write(f'\t\t<box top=\'0\' left=\'0\' width=\'{img_width}\' height=\'{img_height}\'>\n')
        # Finding x and y coordinates of marker to pass to <part> tag
        with open(os.path.join(test_dir, img_id + '.ljson'), 'r') as f:
            markers = json.load(f)['landmarks']['points']
        for i, (x, y) in enumerate(markers):
            x, y = int(x), int(y)
            test_xml.write(f'\t\t\t<part name=\'{i}\' x=\'{x}\' y=\'{y}\'/>\n')
        # Adding closing tag
        test_xml.write(f'\t\t</box>\n')
        test_xml.write(f'\t</image>\n')

# Adding closing tags
test_xml.write('</images>\n')
test_xml.write('</dataset>\n')

test_xml.close()
